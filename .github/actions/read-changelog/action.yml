name: Read Changelog
description: Read certain data from changelog.

inputs:
  section:
    description: Section to search for
    required: true
  has_title:
    description: If the section has a one-line title
    required: false
    default: "true"
  path:
    description: Path to CHANGELOG.md
    required: false
    default: "${{ github.workspace }}/CHANGELOG.md"

runs:
  using: composite
  steps:
    - name: Find section
      id: find
      env:
        CL_FILE: "${{ inputs.path }}"
        SECTION: "${{ inputs.section }}"
      shell: bash
      run: |
        test -f "$CL_FILE" || { echo "ERROR: Not a file: $_" >&2; exit 1; }
        test -n "$SECTION" || { echo "ERROR: No section specified" >&2; exit 1; }
        awk -v section="$SECTION" '
          function error(msg) { if (!e) { printf("ERROR: %s\n", msg) > "/dev/stderr"; e=1 }; exit 1 }

          # Find section.
          match($0, /^## (.+)$/, m) && section == m[1] { found=1; exit }

          END {
            if (!found) error("Section not found")
            printf("::set-output name=start::%d\n", NR + 1)
          }
        ' "$CL_FILE"

    - name: Get title
      id: title
      if: "${{ inputs.has_title == 'true' }}"
      env:
        CL_FILE: "${{ inputs.path }}"
        START: "${{ steps.find.outputs.start }}"
      shell: bash
      run: |
        awk -v start="$START" '
          function error(msg) { if (!e) { printf("ERROR: %s\n", msg) > "/dev/stderr"; e=1 }; exit 1 }

          # Go to starting line.
          NR < start { next }

          # Next non-empty line will be title.
          /.+/ { title=$0; exit }

          END {
            if (!title) error("Title not found")
            if (title !~ /^[A-Za-z0-9]/) error(sprintf("Invalid title for section: %s", title))
            printf("::set-output name=title::%s\n", $title)
            printf("::set-output name=start::%d\n", NR + 1)
          }
        ' "$CL_FILE"

    - name: Get body
      id: body
      env:
        CL_FILE: "${{ inputs.path }}"
        START: "${{ inputs.has_title == 'true' && steps.title.outputs.start || steps.find.outputs.start }}"
      shell: bash
      run: |
        body_file="$(mktemp)"

        # Read body into temporary file.
        awk -v start="$START" -v body_file="$body_file" '
          # Go to starting line.
          NR < start { next }

          # Go to first non-empty line.
          !found && !/.+/ { next }
          !found { found=1 }

          # Read body until next section.
          found && !/^##? / { print >> body_file; next }
          found { exit }
        ' "$CL_FILE"

        # Delete all trailing blank lines at end of file.
        sed -i -e :a -e '/^\n*$/{$d;N;};/\n$/ba' "$body_file"

        # Print after escaping: https://github.community/t/set-output-truncates-multiline-strings/16852/5
        awk '
          BEGIN { printf("::set-output name=body::") }
                { gsub(/%/, "%25"); printf("%s%%0A", $0) }
          END   { printf("\n") }
        ' "$body_file"

        # Cleanup.
        rm -f "$body_file"

outputs:
  title:
    description: Section title
    value: ${{ steps.title.outputs.title }}
  body:
    description: Section title
    value: ${{ steps.body.outputs.body }}
